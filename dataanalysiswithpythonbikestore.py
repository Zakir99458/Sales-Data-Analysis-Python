# -*- coding: utf-8 -*-
"""DataAnalysisWithPythonBikeStore.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/123hieuinRz_Pd1dgcpGmYMjri423lxWu
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# %matplotlib inline
#

# import pandas as pd
# with open('/content/sales_data.csv') as f:
#     for i, line in enumerate(f):
#         if i == 7643:  # Line numbers are zero-indexed in Python
#             print(line)
#             break

sales = pd.read_csv('/content/sales_data.csv', quotechar='"', on_bad_lines='skip', parse_dates=['Date'])

print(sales.head())

sales.shape

sales.info()

sales.describe()

sales['Unit_Cost'].plot(kind='box', vert=False, figsize=(14,6))

sales['Unit_Cost'].plot(kind='density', figsize=(14,6))

ax = sales['Unit_Cost'].plot(kind='density', figsize=(14,6))
ax.axvline(sales['Unit_Cost'].mean(), color='red')
ax.axvline(sales['Unit_Cost'].median(), color='green')

ax = sales['Unit_Cost'].plot(kind='hist', figsize=(14,6))
ax.set_ylabel('Number of Sales')
ax.set_xlabel('dollars')

"""Categorical Analysis and Visualization"""

sales.head()

sales['Age_Group'].value_counts()

sales['Age_Group'].value_counts().plot(kind='pie', figsize=(6,6))

sales['Age_Group'].value_counts().plot(kind='bar', figsize=(6,6))

# Select only numeric columns
numeric_sales = sales.select_dtypes(include=[float, int])
# Calculate the correlation matrix
corr = numeric_sales.corr()
corr

fig = plt.figure(figsize=(8,8))
plt.matshow(corr, cmap='RdBu', fignum=fig.number)
plt.xticks(range(len(corr.columns)), corr.columns, rotation='vertical');
plt.yticks(range(len(corr.columns)), corr.columns);

sales.plot(kind='scatter', x='Customer_Age', y='Revenue', figsize=(6,6))

sales.plot(kind='scatter', x='Revenue', y='Profit', figsize=(6,6))

ax = sales[['Profit', 'Age_Group']].boxplot(by='Age_Group', figsize=(10,6))
ax.set_ylabel('Profit')

box_plot = ['Year','Customer_Age', 'Order_Quantity','Unit_Cost', 'Unit_Price', 'Profit']
sales[box_plot].plot(kind='box', subplots=True, layout=(2,3), figsize=(14,8))

sales['Revenue_per_Age'] = sales['Revenue'] / sales['Customer_Age']
sales['Revenue_per_Age'].head()

sales['Revenue_per_Age'].plot(kind='density', figsize=(14,6))

sales['Calculated_cost'] = sales['Order_Quantity'] * sales['Unit_Cost']
sales['Calculated_cost'].head()

(sales['Calculated_cost'] != sales['Cost']).sum()

sales.plot(kind='scatter', x='Calculated_cost', y='Profit', figsize=(6,6))

sales['Calculated_revenue'] = sales['Cost'] + sales['Profit']
sales['Calculated_revenue'].head()

(sales['Calculated_revenue'] != sales['Revenue']).sum()

sales['Revenue'].plot(kind='hist', bins=100, figsize=(14,6))

sales['Unit_Price'].head()

sales['Unit_Price'] *=1.03
sales['Unit_Price'].head()

sales.loc[sales['State'] == 'Kentucky']

sales.head()

sales.loc[sales['Age_Group']== 'Adults (35-64)']

# Get the mean revenue of the aget group 35-64
sales.loc[sales['Age_Group'] == 'Adults (35-64)', 'Revenue'].mean()

# How many age group below to <25 or Adults (35-64)
sales.loc[sales['Age_Group'].isin(['Youth (<25)', 'Adults (35-64)']), 'Revenue'].shape[0]

# Get the mean revenue of the sales age group 35-64 of average revenue
sales.loc[(sales['Age_Group'] == 'Adults (35-64)') & (sales['Country'] == 'United States'), 'Revenue'].mean()